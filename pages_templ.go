// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "strconv"

func pages(pages []Page, website Website, count LinkCountResult, pageUrl string, prevPage string, nextPage string, addedPagesSet map[string]struct{}) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html>")
		if err != nil {
			return err
		}
		err = header(website.BaseUrl).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body class=\"bg-gray-100\" id=\"container\">")
		if err != nil {
			return err
		}
		err = nav(website.BaseUrl).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"container mx-auto mt-12 p-4\"><a href=\"")
		if err != nil {
			return err
		}
		var var_2 templ.SafeURL = templ.URL(website.websiteURL())
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_2)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:ring focus:ring-opacity-50 focus:ring-blue-300 focus:border-blue-300\">")
		if err != nil {
			return err
		}
		var_3 := `Refresh`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		err = editWebsite(website).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = login(website).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<h1 class=\"text-4xl font-bold mb-6\">")
		if err != nil {
			return err
		}
		var_4 := `PAGES`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><details><summary>")
		if err != nil {
			return err
		}
		var var_5 string = strconv.Itoa(len(addedPagesSet))
		_, err = templBuffer.WriteString(templ.EscapeString(var_5))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_6 := `new pages added - 				`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div>")
		if err != nil {
			return err
		}
		err = process(count, string(website.ID)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></summary><ul>")
		if err != nil {
			return err
		}
		for link := range addedPagesSet {
			_, err = templBuffer.WriteString("<li class=\"bg-green-400\">")
			if err != nil {
				return err
			}
			var var_7 string = link
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</ul></details><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(website.websitePagesURL()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#container\" class=\"space-y-4\"><div id=\"loading-page-processing\" style=\"display:none\">")
		if err != nil {
			return err
		}
		var_8 := `Loading...`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><button type=\"submit\" class=\"w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:ring focus:ring-opacity-50 focus:ring-blue-300 focus:border-blue-300\">")
		if err != nil {
			return err
		}
		var_9 := `Load more website content`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><div class=\"flex items-center space-x-2\"><input type=\"checkbox\" name=\"processAll\" id=\"processAll\" class=\"rounded border-gray-300 text-blue-600 focus:border-blue-500 focus:ring focus:ring-blue-200\"><label for=\"processAll\" class=\"text-gray-700\">")
		if err != nil {
			return err
		}
		var_10 := `Ignore Status/Existing Content`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div><div class=\"flex items-center space-x-2\"><label for=\"processPageSize\" class=\"text-gray-700\">")
		if err != nil {
			return err
		}
		var_11 := `Page Size:`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select id=\"processPageSize\" name=\"processPageSize\" class=\"border rounded py-1 px-3 bg-white shadow-sm text-gray-700 focus:outline-none focus:ring focus:ring-blue-200\"><option value=\"1\">")
		if err != nil {
			return err
		}
		var_12 := `1`
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"5\" selected=\"selected\">")
		if err != nil {
			return err
		}
		var_13 := `5`
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"10\">")
		if err != nil {
			return err
		}
		var_14 := `10`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"25\">")
		if err != nil {
			return err
		}
		var_15 := `25`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"50\">")
		if err != nil {
			return err
		}
		var_16 := `50`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"100\">")
		if err != nil {
			return err
		}
		var_17 := `100`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option></select></div></form><!--")
		if err != nil {
			return err
		}
		var_18 := ` Flexbox header - Can be omitted if not required `
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("--><div class=\"flex mb-2 font-bold text-sm text-gray-600 border-b-2\"><div class=\"w-1/3 p-2\">")
		if err != nil {
			return err
		}
		var_19 := `URL`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"w-1/4 p-2\">")
		if err != nil {
			return err
		}
		var_20 := `Status`
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"w-1/4 p-2\">")
		if err != nil {
			return err
		}
		var_21 := `Title`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"w-1/4 p-2\">")
		if err != nil {
			return err
		}
		var_22 := `Content + Links`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		for _, item := range pages {
			_, err = templBuffer.WriteString("<div class=\"flex mb-2 border-b border-gray-200 hover:bg-gray-50\"><div class=\"w-1/3 p-2\"><a target=\"_blank\" href=\"")
			if err != nil {
				return err
			}
			var var_23 templ.SafeURL = templ.SafeURL(item.URL)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_23)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_24 string = item.URL
			_, err = templBuffer.WriteString(templ.EscapeString(var_24))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div><div class=\"w-1/4 p-2\"><details>")
			if err != nil {
				return err
			}
			if item.ToProcess() {
				_, err = templBuffer.WriteString("<summary>")
				if err != nil {
					return err
				}
				var_25 := `TO_PROCESS`
				_, err = templBuffer.WriteString(var_25)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</summary>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<summary>")
				if err != nil {
					return err
				}
				var_26 := `DONE`
				_, err = templBuffer.WriteString(var_26)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</summary>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_27 string = item.DateCreated.Local().Format(format)
			_, err = templBuffer.WriteString(templ.EscapeString(var_27))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_28 string = item.DateUpdated.Local().Format(format)
			_, err = templBuffer.WriteString(templ.EscapeString(var_28))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <div>")
			if err != nil {
				return err
			}
			var var_29 string = item.PageStatus()
			_, err = templBuffer.WriteString(templ.EscapeString(var_29))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></details></div><div class=\"w-1/4 p-2\">")
			if err != nil {
				return err
			}
			var var_30 string = item.Title
			_, err = templBuffer.WriteString(templ.EscapeString(var_30))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"w-1/4 p-2\"><details><summary class=\"cursor-pointer\">")
			if err != nil {
				return err
			}
			var_31 := `Content: (`
			_, err = templBuffer.WriteString(var_31)
			if err != nil {
				return err
			}
			var var_32 string = strconv.Itoa(len(item.Content))
			_, err = templBuffer.WriteString(templ.EscapeString(var_32))
			if err != nil {
				return err
			}
			var_33 := `) Links: (`
			_, err = templBuffer.WriteString(var_33)
			if err != nil {
				return err
			}
			var var_34 string = strconv.Itoa(len(item.Links))
			_, err = templBuffer.WriteString(templ.EscapeString(var_34))
			if err != nil {
				return err
			}
			var_35 := `)`
			_, err = templBuffer.WriteString(var_35)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</summary><h2>")
			if err != nil {
				return err
			}
			var_36 := `Content`
			_, err = templBuffer.WriteString(var_36)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h2> ")
			if err != nil {
				return err
			}
			var var_37 string = item.Content
			_, err = templBuffer.WriteString(templ.EscapeString(var_37))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <br><details><summary><h2>")
			if err != nil {
				return err
			}
			var_38 := `Links (`
			_, err = templBuffer.WriteString(var_38)
			if err != nil {
				return err
			}
			var var_39 string = strconv.Itoa(len(item.Links))
			_, err = templBuffer.WriteString(templ.EscapeString(var_39))
			if err != nil {
				return err
			}
			var_40 := `)`
			_, err = templBuffer.WriteString(var_40)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h2></summary><ul>")
			if err != nil {
				return err
			}
			for _, link := range item.Links {
				_, err = templBuffer.WriteString("<li>")
				if err != nil {
					return err
				}
				var var_41 string = link
				_, err = templBuffer.WriteString(templ.EscapeString(var_41))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</ul></details></details></div></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></body>")
		if err != nil {
			return err
		}
		err = websiteDelete(website).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
