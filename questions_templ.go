// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"
)

func newQuestions(websiteId uint, pageId uint, pageBlockID uint, questionContent string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"p-4 shadow rounded-lg bg-white\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(websitePageBlockQuestionURL(websiteId, pageId, pageBlockID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"#page-block-container\" class=\"space-y-4\"><div><label for=\"relevantContent\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_2 := `Raw Source Content`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><textarea type=\"text\" rows=\"5\" cols=\"80\" name=\"relevantContent\" id=\"relevantContent\">")
		if err != nil {
			return err
		}
		var var_3 string = questionContent
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</textarea></div><button type=\"submit\" class=\"inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">")
		if err != nil {
			return err
		}
		var_4 := `Make Question`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func questionResult(websiteId uint, pageId uint, pageBlockId uint, questions []Question, pageBlockContent string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\" hx-swap=\"outerHTML\">")
		if err != nil {
			return err
		}
		err = newQuestions(websiteId, pageId, pageBlockId, pageBlockContent).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<h1 class=\"text-2xl font-bold text-gray-800 mb-4\">")
		if err != nil {
			return err
		}
		var_6 := `(`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		var var_7 string = strconv.Itoa(len(questions))
		_, err = templBuffer.WriteString(templ.EscapeString(var_7))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_8 := `Existing Questions)`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><div class=\"flex\">")
		if err != nil {
			return err
		}
		for _, q := range questions {
			_, err = templBuffer.WriteString("<div class=\"w-1/2 border border-2\"><h3 class=\"text-xl font-semibold text-gray-700\">")
			if err != nil {
				return err
			}
			var_9 := `Question Text: `
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			var var_10 string = q.QuestionText
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3><details class=\"p-5 border border-gray-200 rounded-lg shadow-sm\"><summary class=\"cursor-pointer text-lg font-semibold text-gray-700 hover:text-gray-900\">")
			if err != nil {
				return err
			}
			var_11 := `Improve`
			_, err = templBuffer.WriteString(var_11)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</summary>")
			if err != nil {
				return err
			}
			err = newImprovedQuestion(websiteId, pageId, pageBlockId, q).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div hx-trigger=\"intersect once\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(questionImprovement(websiteId, pageId, pageBlockId, q.ID, "")))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_12 := `Loading improvements`
			_, err = templBuffer.WriteString(var_12)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></details></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func questionsFailedResult(websiteId uint, pageId uint, pageBlockID uint, errorMsg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_13 := templ.GetChildren(ctx)
		if var_13 == nil {
			var_13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-swap=\"outerHTML\">")
		if err != nil {
			return err
		}
		err = newQuestions(websiteId, pageId, pageBlockID, "").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div>")
		if err != nil {
			return err
		}
		var var_14 string = errorMsg
		_, err = templBuffer.WriteString(templ.EscapeString(var_14))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
