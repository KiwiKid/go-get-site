// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"
)

func attributeSetSelect(attributeSets []AttributeSet, url string, selectedAttributeSetId *uint) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<select id=\"selectedAttributeSetId\" name=\"selectedAttributeSetId\" class=\"bg-white text-gray-700 p-4 border border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\" hx-trigger=\"change\" hx-target=\"#container\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(url))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-include=\"this\"><span class=\"htmx-indicator\">")
		if err != nil {
			return err
		}
		err = spinner().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span><option value=\"\" selected class=\"text-gray-500\">")
		if err != nil {
			return err
		}
		var_2 := `--Select a different attribute set--`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, att := range attributeSets {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(int(att.ID))))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"text-gray-700\"")
			if err != nil {
				return err
			}
			if selectedAttributeSetId != nil && *selectedAttributeSetId == att.ID {
				_, err = templBuffer.WriteString(" selected")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var var_3 string = att.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_3))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func attributeSetSelected(attribute AttributeSet) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div>")
		if err != nil {
			return err
		}
		var var_5 string = attribute.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_5))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func newAttributeSet() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"p-4 shadow rounded-lg bg-white  border border-gray-400 rounded-md\"><form hx-post=\"/aset\" hx-target=\"#aset-container\" class=\"space-y-4 \"><div><label for=\"setName\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_7 := `Attribute Set Name`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"setName\" id=\"setName\" class=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" placeholder=\"Enter attribute set name\"></div><button type=\"submit\" class=\"inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">")
		if err != nil {
			return err
		}
		var_8 := `Create AttributeSet`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <span class=\"htmx-indicator\">")
		if err != nil {
			return err
		}
		err = spinner().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></button></form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func attributeSetContainer(attributes []Attribute, attributeSets []AttributeSet, attributeModels []AttributeModel, message string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_9 := templ.GetChildren(ctx)
		if var_9 == nil {
			var_9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html>")
		if err != nil {
			return err
		}
		err = header("Attribute Sets").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body>")
		if err != nil {
			return err
		}
		err = nav("Attribute Sets").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"flex\" id=\"aset-container\">")
		if err != nil {
			return err
		}
		err = attributeSetList(attributes, attributeSets, attributeModels, message).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func attributeSetList(attributes []Attribute, attributeSets []AttributeSet, attributeModels []AttributeModel, message string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_10 := templ.GetChildren(ctx)
		if var_10 == nil {
			var_10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"p-4\"><p class=\"text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var var_11 string = message
		_, err = templBuffer.WriteString(templ.EscapeString(var_11))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p></div><div class=\"flex flex-grow -mx-2\"><div class=\"w-full px-2 mb-4\">")
		if err != nil {
			return err
		}
		err = newAttributeSet().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = newAttribute(attributeModels).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"w-full px-2 mb-4\">")
		if err != nil {
			return err
		}
		for _, aset := range attributeSets {
			_, err = templBuffer.WriteString("<div class=\"border border-gray-400 rounded-md\"><h1 class=\"text-xl font-bold text-gray-800 mb-2\">")
			if err != nil {
				return err
			}
			var var_12 string = aset.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_12))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1> ")
			if err != nil {
				return err
			}
			var_13 := `Attributes:`
			_, err = templBuffer.WriteString(var_13)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			for _, alink := range aset.AttributeSetLinks {
				for _, a := range attributes {
					if a.ID == alink.ID {
						err = attribute(a).Render(ctx, templBuffer)
						if err != nil {
							return err
						}
					}
				}
			}
			err = createAttributeSetLink(attributes, aset).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func createAttributeSetLink(attributes []Attribute, attributeSet AttributeSet) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_14 := templ.GetChildren(ctx)
		if var_14 == nil {
			var_14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"p-4 shadow rounded-lg bg-white\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(attributeSetURL(attributeSet.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#aset-container\" class=\"space-y-4\"><div><label for=\"attributeId\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_15 := `Select Attribute`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select name=\"attributeId\" id=\"attributeId\" class=\"mt-1 block w-full p-4 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\">")
		if err != nil {
			return err
		}
		for _, a := range attributes {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(int(a.ID))))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_16 string = a.AISeedQuery
			_, err = templBuffer.WriteString(templ.EscapeString(var_16))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></div><button type=\"submit\" class=\"inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">")
		if err != nil {
			return err
		}
		var_17 := `Assign Attribute`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <span class=\"htmx-indicator\">")
		if err != nil {
			return err
		}
		err = spinner().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></button></form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

/*

func assignAttributeToSet(attributeSet AttributeSet) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_18 := templ.GetChildren(ctx)
		if var_18 == nil {
			var_18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
				_, err = templBuffer.WriteString("<div class=\"p-4 shadow rounded-lg bg-white\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(attributeSetURL(attributeSet.ID)))
		if err != nil {
			return err
		}
				_, err = templBuffer.WriteString("\" hx-swap=\"#attribute-assignment-container\" class=\"space-y-4\"><div><label for=\"attributeSetId\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_19 := `Select AttributeSet`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
				_, err = templBuffer.WriteString("</label><input name=\"attributeSetId\" id=\"attributeSetId\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(int(attributeSet.ID))))
		if err != nil {
			return err
		}
				_, err = templBuffer.WriteString("\"></div><div><label for=\"attributeSeedQuery\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_20 := `Attribute Seed Query`
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
				_, err = templBuffer.WriteString("</label><textarea name=\"attributeSeedQuery\" id=\"attributeSeedQuery\" rows=\"3\" class=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm\" placeholder=\"Enter attribute seed query\"></textarea></div><button type=\"submit\" class=\"inline-flex justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">")
		if err != nil {
			return err
		}
		var_21 := `Assign Attribute`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
				_, err = templBuffer.WriteString(" <span class=\"htmx-indicator\">")
		if err != nil {
			return err
		}
		err = spinner().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
				_, err = templBuffer.WriteString("</span></button>")
		if err != nil {
			return err
		}
		for _, a := range attributeSet.Attributes {
						_, err = templBuffer.WriteString("<div>")
			if err != nil {
				return err
			}
			var var_22 string = a.AISeedQuery
			_, err = templBuffer.WriteString(templ.EscapeString(var_22))
			if err != nil {
				return err
			}
						_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		}
				_, err = templBuffer.WriteString("</form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

*/
